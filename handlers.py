import os
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import InvestmentStates
from utils import get_random_stock, words_to_number, get_stock_info, format_currency
from calculator import calculate_investment
from openai import AsyncOpenAI
from datetime import datetime
import re

router = Router()

# --- SYSTEM PROMPT ---
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∂—ë—Å—Ç–∫–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
    "–¢–≤–æ–π —Å—Ç–∏–ª—å: –∫–æ—Ä–æ—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º, –±–µ–∑ —Ñ–æ—Ä–º—É–ª –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è. "
    "–í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —è–≤–Ω–æ, –Ω–µ —Å–∫—Ä—ã–≤–∞–π –∏—Ö. "
    "–ù–µ –æ–±—ä—è—Å–Ω—è–π —Ä–∞—Å—á—ë—Ç—ã, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏—Ü–∏–∑–º—ã, –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π."
)

# --- RESULT PROMPT ---
RESULT_PROMPT = (
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {year} –≥–æ–¥–∞ —Ç—Ä–∞—Ç–∏–ª {daily_spend} {currency} –≤ –¥–µ–Ω—å –Ω–∞ {habit}. "
    "–ï—Å–ª–∏ –±—ã –æ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ {symbol}, —Ç–æ —Å–µ–≥–æ–¥–Ω—è —É –Ω–µ–≥–æ –±—ã–ª–æ –±—ã {total_value:,} {currency}. "
    "–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_invested:,} {currency}. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {total_value:,} {currency}. "
    "–£–ø—É—â–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞: {missed_profit:,} {currency}. "
    "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {profit_percent:.1f}%. CAGR: {cagr:.1f}%. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.1f}% (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).\n"
    "–í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏, –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ, —Å–∫–æ–ª—å–∫–æ –º–æ–≥ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –∏ —Ä–∞–∑–Ω–∏—Ü—É (—É–ø—É—â–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞) ‚Äî –≤—Å—ë —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∏ –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ, —Å —é–º–æ—Ä–æ–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

CURRENCIES = ["RUB", "USD", "EUR", "AMD", "KZT", "UAH", "BYN", "GBP", "CNY"]
CONFIRM_WORDS = ["–¥–∞", "–≥–æ—Ç–æ–≤", "–æ–∫", "—Å–æ–≥–ª–∞—Å–µ–Ω", "yes", "go"]

# --- START ---
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(InvestmentStates.waiting_for_year)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º)\n–° –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ —Ç—ã –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É? (—É–∫–∞–∂–∏ –≥–æ–¥ –≤ —Ü–∏—Ñ—Ä–∞—Ö)")

# --- YEAR ---
@router.message(InvestmentStates.waiting_for_year)
async def process_year(message: Message, state: FSMContext):
    year_match = re.search(r"\d{4}", message.text)
    if year_match:
        year = int(year_match.group())
        if 1970 <= year <= datetime.now().year:
            await state.update_data(year=year)
            await state.set_state(InvestmentStates.waiting_for_habits)
            await message.answer("–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö–∞–∫–∞—è –≤—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É —Ç–µ–±—è –µ—Å—Ç—å?")
            return
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–∞ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–æ–º (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ)
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ–¥ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1970 –¥–æ {datetime.now().year}")

# --- HABITS ---
@router.message(InvestmentStates.waiting_for_habits)
async def process_habits(message: Message, state: FSMContext):
    habit = message.text.strip().lower()
    # –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ, –ø—É—Å—Ç—ã–µ –∏–ª–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if len(habit) < 2 or habit in ["–Ω–µ—Ç", "-"] or habit.isdigit():
        await message.answer("–û–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!")
        return
    await state.update_data(habit=habit)
    await state.set_state(InvestmentStates.waiting_for_daily_cost)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –Ω–∞ —ç—Ç—É –≤—Ä–µ–¥–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤ –¥–µ–Ω—å?")

# --- DAILY COST ---
@router.message(InvestmentStates.waiting_for_daily_cost)
async def process_daily_cost(message: Message, state: FSMContext):
    text = message.text.lower().replace(",", ".")
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ
    match = re.search(r"[\d.]+", text)
    daily_spend = None
    if match:
        try:
            daily_spend = float(match.group())
        except Exception:
            pass
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É —Å–ª–æ–≤–∞–º–∏ (—Ä—É—Å/–∞–Ω–≥–ª)
    if daily_spend is None:
        daily_spend = words_to_number(text)
    if not daily_spend or daily_spend <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—É–º–º—É –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ –ø—è—Ç—å—Å–æ—Ç)")
        return
    await state.update_data(daily_spend=daily_spend)
    await state.set_state(InvestmentStates.waiting_for_currency)
    await message.answer("–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏?")

# --- CURRENCY ---
@router.message(InvestmentStates.waiting_for_currency)
async def process_currency(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –≤–∞–ª—é—Ç
    currency_map = {
        "usd": ["usd", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä—ã", "dollar", "dollars", "–±–∞–∫—Å", "–±–∞–∫—Å—ã"],
        "eur": ["eur", "–µ–≤—Ä–æ", "euro"],
        "rub": ["rub", "—Ä—É–±–ª—å", "—Ä—É–±", "—Ä—É–±–ª–∏", "ruble", "rubles"],
        "amd": ["amd", "–¥—Ä–∞–º", "dram"],
        "kzt": ["kzt", "—Ç–µ–Ω–≥–µ", "tenge"],
        "uah": ["uah", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω—ã", "hryvnia"],
        "byn": ["byn", "–±–µ–ª—Ä—É–±–ª—å", "–±–µ–ª.—Ä—É–±–ª—å", "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", "byrub", "byr"],
        "gbp": ["gbp", "—Ñ—É–Ω—Ç", "—Ñ—É–Ω—Ç—ã", "pound", "pounds"],
        "cny": ["cny", "—é–∞–Ω—å", "yuan"]
    }
    currency_code = None
    for code, synonyms in currency_map.items():
        if any(s in text for s in synonyms):
            currency_code = code.upper()
            break
    if not currency_code:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞: USD, EUR, RUB, AMD, KZT, UAH, BYN, GBP, CNY")
        return
    await state.update_data(currency=currency_code)
    data = await state.get_data()
    monthly = int(data["daily_spend"] * 30)
    await state.set_state(InvestmentStates.waiting_for_confirmation)
    await message.answer(f"–¢—ã —Ç—Ä–∞—Ç–∏—à—å –ø—Ä–∏–º–µ—Ä–Ω–æ {monthly} {currency_code} –≤ –º–µ—Å—è—Ü. –ì–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É?")

def generate_final_message(symbol, stock_info, habit, year, daily_spend, currency, total_value, total_invested, missed_profit, profit_percent):
    # –°–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    habit_data = {
        "—Å–∏–≥–∞—Ä–µ—Ç—ã": {
            "habit_acc": "—Å–∏–≥–∞—Ä–µ—Ç—ã",
            "habit_prep": "–Ω–∞ —Å–∏–≥–∞—Ä–µ—Ç—ã",
            "joke": "–ú–æ–≥ –±—ã –¥—ã—à–∞—Ç—å –ø–æ–ª–Ω–æ–π –≥—Ä—É–¥—å—é –∏ –∫—É–ø–∏—Ç—å —Å–µ–±–µ —è—Ö—Ç—É!"
        },
        "–∫–æ—Ñ–µ": {
            "habit_acc": "–∫–æ—Ñ–µ",
            "habit_prep": "–Ω–∞ –∫–æ—Ñ–µ",
            "joke": "–ú–æ–≥ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –∫–æ—Ñ–µ–π–Ω—é!"
        },
        "–∞–ª–∫–æ–≥–æ–ª—å": {
            "habit_acc": "–∞–ª–∫–æ–≥–æ–ª—å",
            "habit_prep": "–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å",
            "joke": "–ú–æ–≥ –±—ã –∫—É–ø–∏—Ç—å –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫ –∏ –ø–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë!"
        },
        "–¥–µ–≤–æ—á–∫–∏": {
            "habit_acc": "–¥–µ–≤–æ—á–µ–∫",
            "habit_prep": "–Ω–∞ –¥–µ–≤–æ—á–µ–∫",
            "joke": "–ú–æ–≥ –±—ã –∫—É–ø–∏—Ç—å —Å–µ–±–µ –æ—Å—Ç—Ä–æ–≤ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö!"
        },
        "—Ñ–∞—Å—Ç—Ñ—É–¥": {
            "habit_acc": "—Ñ–∞—Å—Ç—Ñ—É–¥",
            "habit_prep": "–Ω–∞ —Ñ–∞—Å—Ç—Ñ—É–¥",
            "joke": "–ú–æ–≥ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –±—É—Ä–≥–µ—Ä–Ω—É—é!"
        },
        "—Å–ª–∞–¥–∫–æ–µ": {
            "habit_acc": "—Å–ª–∞–¥–∫–æ–µ",
            "habit_prep": "–Ω–∞ —Å–ª–∞–¥–∫–æ–µ",
            "joke": "–ú–æ–≥ –±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —à–æ–∫–æ–ª–∞–¥–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É!"
        }
    }
    h = habit.lower()
    for key in habit_data:
        if key in h:
            hd = habit_data[key]
            break
    else:
        hd = {"habit_acc": habit, "habit_prep": f"–Ω–∞ {habit}", "joke": "–ú–æ–≥ –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É–º–æ–º!"}
    # –Æ–º–æ—Ä –ø–æ –≥–æ–¥—É
    if int(year) < 2000:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –º–æ–≥ –±—ã —Å—Ç–∞—Ç—å –ª–µ–≥–µ–Ω–¥–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!"
    elif int(year) < 2010:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –±—ã —É–∂–µ –º–æ–≥ –∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É!"
    else:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –º–æ–≥ –±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –º–µ—á—Ç—É!"
    return (
        f"üí° {symbol} ({stock_info.get('description', symbol)})\n\n"
        f"üö¨ –í–º–µ—Å—Ç–æ {hd['habit_acc']} —Ç—ã –º–æ–≥ –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {format_currency(daily_spend, currency)} –≤ –¥–µ–Ω—å –≤ {symbol} —Å {year} –≥–æ–¥–∞.\n"
        f"üí∞ –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –±—ã–ª–æ –±—ã: {format_currency(total_value, currency)}!\n\n"
        f"üî• –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {format_currency(total_invested, currency)} {hd['habit_prep']}, —Ç—ã –º–æ–≥ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å +{format_currency(missed_profit, currency)}!\n"
        f"üìà –≠—Ç–æ —Ü–µ–ª—ã—Ö {profit_percent:.1f}% –ø—Ä–∏–±—ã–ª–∏!\n\n"
        f"‚ùóÔ∏è –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª! {hd['joke']} {year_joke}\n\n"
        f"ü§ì –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Ç—å —É–º–Ω–µ–µ, —á–µ–º —Ç—ã –±—ã–ª –≤ {year} ‚Äî —É–≥–ª—É–±–∏—Å—å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Å–ª–µ–¥–∏ –∑–∞ –º–æ–∏–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–æ–º!\n\n"
        f"üö® –£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—ä–µ–¥–∞—é—Ç —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏. –ü–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è!\n\n"
        f"*–í—Å–µ —Ü–∏—Ñ—Ä—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ, —Ä–∞—Å—á—ë—Ç –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–µ –∞–∫—Ç–∏–≤–∞, –±–µ–∑ —É—á—ë—Ç–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π.*"
    )

# --- CONFIRMATION ---
@router.message(InvestmentStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if not any(word in text for word in CONFIRM_WORDS):
        await message.answer("–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–ø–∏—à–∏ '–¥–∞', '–≥–æ—Ç–æ–≤', '–æ–∫' –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ—é —Å—É–º–º—É!")
        return
    data = await state.get_data()
    year = data["year"]
    daily_spend = data["daily_spend"]
    habit = data["habit"]
    currency = data["currency"]
    symbol = get_random_stock(start_year=year)
    stock_info = get_stock_info(symbol)
    result = calculate_investment(
        start_year=year,
        daily_spend=daily_spend,
        symbol=symbol
    )
    total_invested = int(result["total_invested"])
    total_value = int(result["total_value"])
    missed_profit = int(total_value - total_invested)
    profit_percent = result["profit_percent"]
    final_text = generate_final_message(
        symbol, stock_info, habit, year, daily_spend, currency,
        total_value, total_invested, missed_profit, profit_percent
    )
    await message.answer(final_text)
    await state.clear()

def register_handlers(dp):
    dp.include_router(router) 