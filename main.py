from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import logging
from dotenv import load_dotenv
from utils import get_random_stock, words_to_number, get_stock_info, format_currency
from calculator import calculate_investment
from openai import OpenAI
from datetime import datetime
import re

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# OpenAI client
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# Constants
CURRENCIES = ["RUB", "USD", "EUR", "AMD", "KZT", "UAH", "BYN", "GBP", "CNY"]
CONFIRM_WORDS = ["–¥–∞", "–≥–æ—Ç–æ–≤", "–æ–∫", "—Å–æ–≥–ª–∞—Å–µ–Ω", "yes", "go"]

# User sessions storage (in production use Redis or database)
user_sessions = {}

def generate_final_message(symbol, stock_info, habit, year, daily_spend, currency, total_value, total_invested, missed_profit, profit_percent):
    """Generate final motivational message"""
    # –°–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    habit_data = {
        "—Å–∏–≥–∞—Ä–µ—Ç—ã": {
            "habit_acc": "—Å–∏–≥–∞—Ä–µ—Ç—ã",
            "habit_prep": "–Ω–∞ —Å–∏–≥–∞—Ä–µ—Ç—ã",
            "joke": "–ú–æ–≥ –±—ã –¥—ã—à–∞—Ç—å –ø–æ–ª–Ω–æ–π –≥—Ä—É–¥—å—é –∏ –∫—É–ø–∏—Ç—å —Å–µ–±–µ —è—Ö—Ç—É!"
        },
        "–∫–æ—Ñ–µ": {
            "habit_acc": "–∫–æ—Ñ–µ",
            "habit_prep": "–Ω–∞ –∫–æ—Ñ–µ",
            "joke": "–ú–æ–≥ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –∫–æ—Ñ–µ–π–Ω—é!"
        },
        "–∞–ª–∫–æ–≥–æ–ª—å": {
            "habit_acc": "–∞–ª–∫–æ–≥–æ–ª—å",
            "habit_prep": "–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å",
            "joke": "–ú–æ–≥ –±—ã –∫—É–ø–∏—Ç—å –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫ –∏ –ø–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë!"
        },
        "–¥–µ–≤–æ—á–∫–∏": {
            "habit_acc": "–¥–µ–≤–æ—á–µ–∫",
            "habit_prep": "–Ω–∞ –¥–µ–≤–æ—á–µ–∫",
            "joke": "–ú–æ–≥ –±—ã –∫—É–ø–∏—Ç—å —Å–µ–±–µ –æ—Å—Ç—Ä–æ–≤ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö!"
        },
        "—Ñ–∞—Å—Ç—Ñ—É–¥": {
            "habit_acc": "—Ñ–∞—Å—Ç—Ñ—É–¥",
            "habit_prep": "–Ω–∞ —Ñ–∞—Å—Ç—Ñ—É–¥",
            "joke": "–ú–æ–≥ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –±—É—Ä–≥–µ—Ä–Ω—É—é!"
        },
        "—Å–ª–∞–¥–∫–æ–µ": {
            "habit_acc": "—Å–ª–∞–¥–∫–æ–µ",
            "habit_prep": "–Ω–∞ —Å–ª–∞–¥–∫–æ–µ",
            "joke": "–ú–æ–≥ –±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —à–æ–∫–æ–ª–∞–¥–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É!"
        }
    }
    
    h = habit.lower()
    for key in habit_data:
        if key in h:
            hd = habit_data[key]
            break
    else:
        hd = {"habit_acc": habit, "habit_prep": f"–Ω–∞ {habit}", "joke": "–ú–æ–≥ –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —É–º–æ–º!"}
    
    # –Æ–º–æ—Ä –ø–æ –≥–æ–¥—É
    if int(year) < 2000:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –º–æ–≥ –±—ã —Å—Ç–∞—Ç—å –ª–µ–≥–µ–Ω–¥–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!"
    elif int(year) < 2010:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –±—ã —É–∂–µ –º–æ–≥ –∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É!"
    else:
        year_joke = f"–° {year} –≥–æ–¥–∞ —Ç—ã –º–æ–≥ –±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –º–µ—á—Ç—É!"
    
    return (
        f"üí° {symbol} ({stock_info.get('description', symbol)})\n\n"
        f"üö¨ –í–º–µ—Å—Ç–æ {hd['habit_acc']} —Ç—ã –º–æ–≥ –±—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {format_currency(daily_spend, currency)} –≤ –¥–µ–Ω—å –≤ {symbol} —Å {year} –≥–æ–¥–∞.\n"
        f"üí∞ –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –±—ã–ª–æ –±—ã: {format_currency(total_value, currency)}!\n\n"
        f"üî• –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {format_currency(total_invested, currency)} {hd['habit_prep']}, —Ç—ã –º–æ–≥ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å +{format_currency(missed_profit, currency)}!\n"
        f"üìà –≠—Ç–æ —Ü–µ–ª—ã—Ö {profit_percent:.1f}% –ø—Ä–∏–±—ã–ª–∏!\n\n"
        f"‚ùóÔ∏è –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª! {hd['joke']} {year_joke}\n\n"
        f"ü§ì –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Ç—å —É–º–Ω–µ–µ, —á–µ–º —Ç—ã –±—ã–ª –≤ {year} ‚Äî —É–≥–ª—É–±–∏—Å—å –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Å–ª–µ–¥–∏ –∑–∞ –º–æ–∏–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–æ–º!\n\n"
        f"üö® –£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—ä–µ–¥–∞—é—Ç —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏. –ü–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è!\n\n"
        f"*–í—Å–µ —Ü–∏—Ñ—Ä—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ, —Ä–∞—Å—á—ë—Ç –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–µ –∞–∫—Ç–∏–≤–∞, –±–µ–∑ —É—á—ë—Ç–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π.*"
    )

def process_user_input(user_id, message_text):
    """Process user input and return appropriate response"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {"state": "waiting_for_year"}
    
    session = user_sessions[user_id]
    state = session["state"]
    
    if state == "waiting_for_year":
        year_match = re.search(r"\d{4}", message_text)
        if year_match:
            year = int(year_match.group())
            if 1970 <= year <= datetime.now().year:
                session["year"] = year
                session["state"] = "waiting_for_habits"
                return "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö–∞–∫–∞—è –≤—Ä–µ–¥–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É —Ç–µ–±—è –µ—Å—Ç—å?"
        
        return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ–¥ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1970 –¥–æ {datetime.now().year}"
    
    elif state == "waiting_for_habits":
        habit = message_text.strip().lower()
        if len(habit) < 2 or habit in ["–Ω–µ—Ç", "-"] or habit.isdigit():
            return "–û–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
        
        session["habit"] = habit
        session["state"] = "waiting_for_daily_cost"
        return "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –Ω–∞ —ç—Ç—É –≤—Ä–µ–¥–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤ –¥–µ–Ω—å?"
    
    elif state == "waiting_for_daily_cost":
        text = message_text.lower().replace(",", ".")
        match = re.search(r"[\d.]+", text)
        daily_spend = None
        if match:
            try:
                daily_spend = float(match.group())
            except Exception:
                pass
        
        if daily_spend is None:
            daily_spend = words_to_number(text)
        
        if not daily_spend or daily_spend <= 0:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—É–º–º—É –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ –ø—è—Ç—å—Å–æ—Ç)"
        
        session["daily_spend"] = daily_spend
        session["state"] = "waiting_for_currency"
        return "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏?"
    
    elif state == "waiting_for_currency":
        text = message_text.strip().lower()
        currency_map = {
            "usd": ["usd", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä—ã", "dollar", "dollars", "–±–∞–∫—Å", "–±–∞–∫—Å—ã"],
            "eur": ["eur", "–µ–≤—Ä–æ", "euro"],
            "rub": ["rub", "—Ä—É–±–ª—å", "—Ä—É–±", "—Ä—É–±–ª–∏", "ruble", "rubles"],
            "amd": ["amd", "–¥—Ä–∞–º", "dram"],
            "kzt": ["kzt", "—Ç–µ–Ω–≥–µ", "tenge"],
            "uah": ["uah", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω—ã", "hryvnia"],
            "byn": ["byn", "–±–µ–ª—Ä—É–±–ª—å", "–±–µ–ª.—Ä—É–±–ª—å", "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", "byrub", "byr"],
            "gbp": ["gbp", "—Ñ—É–Ω—Ç", "—Ñ—É–Ω—Ç—ã", "pound", "pounds"],
            "cny": ["cny", "—é–∞–Ω—å", "yuan"]
        }
        
        currency_code = None
        for code, synonyms in currency_map.items():
            if any(s in text for s in synonyms):
                currency_code = code.upper()
                break
        
        if not currency_code:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞: USD, EUR, RUB, AMD, KZT, UAH, BYN, GBP, CNY"
        
        session["currency"] = currency_code
        monthly = int(session["daily_spend"] * 30)
        session["state"] = "waiting_for_confirmation"
        return f"–¢—ã —Ç—Ä–∞—Ç–∏—à—å –ø—Ä–∏–º–µ—Ä–Ω–æ {monthly} {currency_code} –≤ –º–µ—Å—è—Ü. –ì–æ—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É?"
    
    elif state == "waiting_for_confirmation":
        text = message_text.strip().lower()
        if not any(word in text for word in CONFIRM_WORDS):
            return "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–ø–∏—à–∏ '–¥–∞', '–≥–æ—Ç–æ–≤', '–æ–∫' –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ—é —Å—É–º–º—É!"
        
        # Calculate investment
        year = session["year"]
        daily_spend = session["daily_spend"]
        habit = session["habit"]
        currency = session["currency"]
        
        symbol = get_random_stock(start_year=year)
        stock_info = get_stock_info(symbol)
        result = calculate_investment(
            start_year=year,
            daily_spend=daily_spend,
            symbol=symbol
        )
        
        total_invested = int(result["total_invested"])
        total_value = int(result["total_value"])
        missed_profit = int(total_value - total_invested)
        profit_percent = result["profit_percent"]
        
        final_text = generate_final_message(
            symbol, stock_info, habit, year, daily_spend, currency,
            total_value, total_invested, missed_profit, profit_percent
        )
        
        # Clear session
        del user_sessions[user_id]
        
        return final_text

@app.route('/webhook', methods=['POST'])
def webhook():
    """Handle ManyChat webhook requests"""
    try:
        data = request.get_json()
        
        # Extract user message and ID from ManyChat payload
        # Adjust these fields based on your ManyChat configuration
        user_message = data.get('message', {}).get('text', '')
        user_id = data.get('user', {}).get('id', '')
        
        if not user_message or not user_id:
            return jsonify({"error": "Missing message or user ID"}), 400
        
        # Process the message
        response_text = process_user_input(user_id, user_message)
        
        # Return response for ManyChat
        return jsonify({
            "messages": [
                {
                    "type": "text",
                    "text": response_text
                }
            ]
        })
        
    except Exception as e:
        logging.error(f"Error processing webhook: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy"}), 200

@app.route('/', methods=['GET'])
def home():
    """Home endpoint"""
    return jsonify({
        "message": "Financial Assistant API",
        "status": "running",
        "endpoints": {
            "webhook": "/webhook (POST)",
            "health": "/health (GET)"
        }
    }), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=False) 